require('dotenv').config();

const { startKeyBoard, mainKeyBoard, timeKeyBoard, teaKeyBoard, mantiKeyBoard, newOrderKeyBoard, mistakeKeyBoard, } = require('./keyborads');
const { coffeCarousel, bakeryCarousel, coctailCarousel } = require('./carousels');
const { getCoffe, getBakery, getTea, getManti, getCoctail } = require('./menus');
const { VK } = require('vk-io');
const https = require('https');
let agent = https.createServer();
agent.listen(process.env.PORT || 5000)
const bot = new VK({
    token: process.env.TOKEN,
    server: agent
});
const api = bot.api;

const orderPhrases = new RegExp('–∫–∞–ø—É—á–∏–Ω–æ|–ª–∞—Ç—Ç–µ|–∞–º–µ—Ä–∏–∫–∞–Ω–æ|—ç—Å–ø—Ä–µ—Å—Å–æ|3–≤1|—Å–∏—Ä–æ–ø|–º–∞—Ä—à–º–µ–ª–ª–æ—É|–±–ª–∏–Ω|—á–µ–±—É—Ä–µ–∫|—á–∞–π [–∑,—Å]|–º–∞–Ω—Ç|–∫–æ–∫—Ç–µ–π–ª—å [3,2]00–º–ª', 'i');
const timeExp = /\d\d:\d\d/;

//bot.listen(process.env.PORT || 5000);
bot.updates.on('message_new', async (context) => {
    console.log(context.senderId);
    if (context.text === '–ù–∞—á–∞—Ç—å' || context.text === "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑!") beginWork(context)
    else if (!localDB[context.senderId]) catchFool(context);
    if (context.text.startsWith('–ö–æ—Ñ–µ')) getCoffe(context, coffeCarousel, api);
    if (context.text.startsWith('–í—ã–ø–µ—á–∫–∞')) getBakery(context, bakeryCarousel, api);
    if (context.text === ('–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –∫–æ–∫—Ç–µ–π–ª—å ü•õ')) getCoctail(context, coctailCarousel, api);
    if (context.text === '–ß–∞–π') getTea(context, teaKeyBoard, api);
    if (context.text.startsWith('–ú–∞–Ω—Ç—ã')) getManti(context, mantiKeyBoard, api);
    if (context.text === '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑') getOrder(context, api);
    if (context.text === '–í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è') pickTime(context);
    if (context.text === '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑') cancelOrder(context);
    if (context.text === '–û–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑!') pushOrder(context);
    if (timeExp.test(context.text)) buyMessage(context);
    if (orderPhrases.test(context.text)) continueWork(context);
    if (!context.state.isHandled) catchFool(context);
});

async function beginWork(context) {
    let id = context.senderId;
    let random_id = context.conversationMessageId;
    localDB[id] = {};
    localDB[id].order = [];
    localDB[id].hasManti = false;
    setTimeout(cancelOrder.bind(this, context), 1000 * 60 * 30)
    await api.messages.send({
        message: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –∑–∞–∫–∞–∑!',
        keyboard: startKeyBoard,
        random_id,
        user_id: id
    });
}

async function continueWork(context) {
    context.state = { isHandled: true }
    let id = context.senderId;
    if (context.text.includes('–º–∞–Ω—Ç')) localDB[id].hasManti = true;
    localDB[id].order.push(context.text);
    let random_id = context.conversationMessageId
    await api.messages.send({
        message: '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å –∏–ª–∏, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –∑–∞–≤—Ä–µ—à–µ–Ω, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è!',
        keyboard: mainKeyBoard,
        random_id,
        user_id: id
    });
}

async function pickTime(context) {
    context.state = { isHandled: true }
    let id = context.senderId;
    let random_id = context.conversationMessageId;
    if (!!localDB[context.senderId].order[0]) { //–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É—Ä–∞–∫–∞, –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–∫–∞–∑–∞–ª
        let times = getTimes(context);
        let message = localDB[id].hasManti ?
            '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! (–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –º–∞–Ω—Ç 45 –º–∏–Ω.)' : "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!"
        await api.messages.send({
            message,
            keyboard: timeKeyBoard(times),
            random_id,
            user_id: id
        });
    } else beginWork(context)
}

function getTimes(context) {
    let times = [];
    let time = new Date();
    time = localDB[context.senderId].hasManti ?
        time.AddMinutes(80) : time.AddMinutes(5);
    let idx = theClosestTime(time);
    console.log(pickedTimes[idx]);
    while (times.length < 30) {
        if (Math.abs(time - pickedTimes[idx]) > 150000) {
            let minutes = time.getMinutes() < 10 ? "0" + time.getMinutes() : time.getMinutes();
            let hours = time.getHours() < 10 ? "0" + time.getHours() : time.getHours();
            times.push(`${hours}:${minutes}`);
        }

        if (time.getMinutes() > 58) {
            time.setMinutes(0);
            time.setHours(time.getHours() + 1);
        } else {
            time.setMinutes(time.getMinutes() + 1)
        }
    }
    return times;
}

bot.updates.start();


async function buyMessage(context) {
    let id = context.senderId;
    context.state = { isHandled: true };
    let [hours, minutes] = context.text.split(":");
    let time = new Date();
    time.setMinutes(+minutes);
    time.setHours(+hours);
    localDB[id].time = context.text;
    createPickedTime(time);

    let message = "–í–∞—à –∑–∞–∫–∞–∑:\n" + localDB[id].order.join("\n") + "\n–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è:" + localDB[id].time;
    let random_id = context.conversationMessageId;
    await api.messages.send({
        message,
        keyboard: newOrderKeyBoard,
        random_id,
        user_id: id
    });
}

async function getOrder(context, api) {
    context.state = { isHandled: true }
    let id = context.senderId;
    let message = "–í–∞—à –∑–∞–∫–∞–∑:\n" + localDB[id].order.join("\n");
    let random_id = context.conversationMessageId;
    await api.messages.send({
        message,
        keyboard: mainKeyBoard,
        random_id,
        user_id: id
    });
}

async function cancelOrder(context) {
    context.state = { isHandled: true }
    let id = context.senderId;
    localDB[id].hasManti = false;
    localDB[id].order = [];
    let random_id = context.conversationMessageId;
    await api.messages.send({
        message: "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω!",
        keyboard: startKeyBoard,
        random_id,
        user_id: id
    });
}

async function catchFool(context) {
    let id = context.senderId;
    let random_id = context.conversationMessageId;
    await api.messages.send({
        message: "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ!",
        keyboard: mistakeKeyBoard,
        random_id,
        user_id: id
    });
}


var localDB = {};

var pickedTimes = [new Date() - 1000 * 60 * 60 * 2]

function theClosestTime(time) {
    let min = 1000 * 60 * 60 * 2;
    let index = 0;
    pickedTimes.forEach((pickedTime, idx) => { if (Math.abs(time - pickedTime) < min) index = idx })
    return index;
}

async function pushOrder(context) {
    let id = context.senderId;
    psuhTheOrderToBaristas(context, id);
    let random_id = context.conversationMessageId;
    await api.messages.send({
        message: "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É!",
        keyboard: mistakeKeyBoard,
        random_id,
        user_id: id
    });
}

function createPickedTime(pickedTime) {
    pickedTimes.push(pickedTime);
    setTimeout(() => { pickedTimes = pickedTimes.filter(time => time != pickedTime) }, 1000 * 60 * 60 * 2)
}

async function psuhTheOrderToBaristas(context, id) {
    message = "–ó–∞–∫–∞–∑:\n" + localDB[id].order.join("\n") + "\n–í—Ä–µ–º—è - " + localDB[id].time;
    console.log(message);
    let random_id = context.conversationMessageId * 2;
    await api.messages.send({
        message,
        random_id,
        user_id: 165865599
    });
    random_id++;
    await api.messages.send({
        message,
        random_id,
        user_id: 544246967
    });
    random_id++;
    await api.messages.send({
        message,
        random_id,
        user_id: 339548026
    });
}

Date.prototype.AddMinutes = (minutes) => {
    let time = new Date();
    for (let i = 0; i < minutes; i++) {
        if (time.getMinutes() > 58) {
            time.setMinutes(0);
            time.setHours(time.getHours() + 1);
        } else time.setMinutes(time.getMinutes() + 1)
    }
    return time;
}